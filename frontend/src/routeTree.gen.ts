/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ProjectsRouteRouteImport } from './routes/projects/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProjectsIndexRouteImport } from './routes/projects/index'
import { Route as ProjectsProjectIdIndexRouteImport } from './routes/projects/$projectId/index'
import { Route as ProjectsProjectIdChatRouteImport } from './routes/projects/$projectId/chat'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsRouteRoute = ProjectsRouteRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsIndexRoute = ProjectsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProjectsRouteRoute,
} as any)
const ProjectsProjectIdIndexRoute = ProjectsProjectIdIndexRouteImport.update({
  id: '/$projectId/',
  path: '/$projectId/',
  getParentRoute: () => ProjectsRouteRoute,
} as any)
const ProjectsProjectIdChatRoute = ProjectsProjectIdChatRouteImport.update({
  id: '/$projectId/chat',
  path: '/$projectId/chat',
  getParentRoute: () => ProjectsRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/projects': typeof ProjectsRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/projects/': typeof ProjectsIndexRoute
  '/projects/$projectId/chat': typeof ProjectsProjectIdChatRoute
  '/projects/$projectId': typeof ProjectsProjectIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/projects': typeof ProjectsIndexRoute
  '/projects/$projectId/chat': typeof ProjectsProjectIdChatRoute
  '/projects/$projectId': typeof ProjectsProjectIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/projects': typeof ProjectsRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/projects/': typeof ProjectsIndexRoute
  '/projects/$projectId/chat': typeof ProjectsProjectIdChatRoute
  '/projects/$projectId/': typeof ProjectsProjectIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/projects'
    | '/login'
    | '/projects/'
    | '/projects/$projectId/chat'
    | '/projects/$projectId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/projects'
    | '/projects/$projectId/chat'
    | '/projects/$projectId'
  id:
    | '__root__'
    | '/'
    | '/projects'
    | '/login'
    | '/projects/'
    | '/projects/$projectId/chat'
    | '/projects/$projectId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProjectsRouteRoute: typeof ProjectsRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/': {
      id: '/projects/'
      path: '/'
      fullPath: '/projects/'
      preLoaderRoute: typeof ProjectsIndexRouteImport
      parentRoute: typeof ProjectsRouteRoute
    }
    '/projects/$projectId/': {
      id: '/projects/$projectId/'
      path: '/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof ProjectsProjectIdIndexRouteImport
      parentRoute: typeof ProjectsRouteRoute
    }
    '/projects/$projectId/chat': {
      id: '/projects/$projectId/chat'
      path: '/$projectId/chat'
      fullPath: '/projects/$projectId/chat'
      preLoaderRoute: typeof ProjectsProjectIdChatRouteImport
      parentRoute: typeof ProjectsRouteRoute
    }
  }
}

interface ProjectsRouteRouteChildren {
  ProjectsIndexRoute: typeof ProjectsIndexRoute
  ProjectsProjectIdChatRoute: typeof ProjectsProjectIdChatRoute
  ProjectsProjectIdIndexRoute: typeof ProjectsProjectIdIndexRoute
}

const ProjectsRouteRouteChildren: ProjectsRouteRouteChildren = {
  ProjectsIndexRoute: ProjectsIndexRoute,
  ProjectsProjectIdChatRoute: ProjectsProjectIdChatRoute,
  ProjectsProjectIdIndexRoute: ProjectsProjectIdIndexRoute,
}

const ProjectsRouteRouteWithChildren = ProjectsRouteRoute._addFileChildren(
  ProjectsRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProjectsRouteRoute: ProjectsRouteRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
