// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: chats.sql

package queries

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createChat = `-- name: CreateChat :one
INSERT INTO chats (project_id) VALUES ($1) returning id
`

func (q *Queries) CreateChat(ctx context.Context, projectID pgtype.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createChat, projectID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createChatMember = `-- name: CreateChatMember :exec
INSERT INTO chat_members (user_id, chat_id, last_seen_at, joined_at) VALUES ($1, $2, $3, $4)
`

type CreateChatMemberParams struct {
	UserID     uuid.UUID
	ChatID     uuid.UUID
	LastSeenAt pgtype.Timestamptz
	JoinedAt   pgtype.Timestamptz
}

func (q *Queries) CreateChatMember(ctx context.Context, arg CreateChatMemberParams) error {
	_, err := q.db.Exec(ctx, createChatMember,
		arg.UserID,
		arg.ChatID,
		arg.LastSeenAt,
		arg.JoinedAt,
	)
	return err
}

const createChatMessage = `-- name: CreateChatMessage :exec
INSERT INTO chat_messages (chat_id, user_id, content, created_at, updated_at, message_type) VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateChatMessageParams struct {
	ChatID      uuid.UUID
	UserID      pgtype.UUID
	Content     string
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	MessageType string
}

func (q *Queries) CreateChatMessage(ctx context.Context, arg CreateChatMessageParams) error {
	_, err := q.db.Exec(ctx, createChatMessage,
		arg.ChatID,
		arg.UserID,
		arg.Content,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.MessageType,
	)
	return err
}

const getChatById = `-- name: GetChatById :one
SELECT id, project_id, created_at, updated_at FROM chats WHERE id = $1
`

func (q *Queries) GetChatById(ctx context.Context, id uuid.UUID) (Chat, error) {
	row := q.db.QueryRow(ctx, getChatById, id)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChatByProjectId = `-- name: GetChatByProjectId :one
SELECT id, project_id, created_at, updated_at FROM chats WHERE project_id = $1
`

func (q *Queries) GetChatByProjectId(ctx context.Context, projectID pgtype.UUID) (Chat, error) {
	row := q.db.QueryRow(ctx, getChatByProjectId, projectID)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateChatMemberLastSeenAt = `-- name: UpdateChatMemberLastSeenAt :exec
UPDATE chat_members SET last_seen_at = $1 WHERE user_id = $2 AND chat_id = $3
`

type UpdateChatMemberLastSeenAtParams struct {
	LastSeenAt pgtype.Timestamptz
	UserID     uuid.UUID
	ChatID     uuid.UUID
}

func (q *Queries) UpdateChatMemberLastSeenAt(ctx context.Context, arg UpdateChatMemberLastSeenAtParams) error {
	_, err := q.db.Exec(ctx, updateChatMemberLastSeenAt, arg.LastSeenAt, arg.UserID, arg.ChatID)
	return err
}
