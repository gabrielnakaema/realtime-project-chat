// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: projects.sql

package queries

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createProject = `-- name: CreateProject :one
INSERT INTO
  projects (user_id, name, description)
VALUES
  ($1, $2, $3) returning id
`

type CreateProjectParams struct {
	UserID      uuid.UUID
	Name        string
	Description string
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createProject, arg.UserID, arg.Name, arg.Description)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createProjectMember = `-- name: CreateProjectMember :one
INSERT INTO
  project_members (user_id, project_id, role)
VALUES
  ($1, $2, $3) returning id
`

type CreateProjectMemberParams struct {
	UserID    uuid.UUID
	ProjectID uuid.UUID
	Role      string
}

func (q *Queries) CreateProjectMember(ctx context.Context, arg CreateProjectMemberParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createProjectMember, arg.UserID, arg.ProjectID, arg.Role)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getProjectById = `-- name: GetProjectById :one
WITH project_members_cte AS (
  SELECT
    pm.id as project_member_id,
    pm.user_id as project_member_user_id,
    pm.project_id,
    pm.role,
    u.id as user_id,
    u.name,
    u.email,
    u.created_at,
    u.updated_at
  FROM
    project_members pm
    JOIN users u ON u.id = pm.user_id
  WHERE
    pm.project_id = $1
)
SELECT
  p.id, p.user_id, p.name, p.description, p.created_at, p.updated_at,
  coalesce(
    jsonb_agg(
      jsonb_build_object(
        'id',
        pm.project_member_id,
        'user_id',
        pm.project_member_user_id,
        'project_id',
        pm.project_id,
        'role',
        pm.role,
        'user',
        jsonb_build_object(
          'id',
          pm.user_id,
          'name',
          pm.name,
          'email',
          pm.email,
          'created_at',
          pm.created_at,
          'updated_at',
          pm.updated_at
        )
      )
    ) filter (
      where
        pm.project_member_id is not null
    ),
    '[]' :: jsonb
  ) as members
FROM
  projects p
  LEFT JOIN project_members_cte pm ON pm.project_id = p.id
WHERE
  p.id = $1
GROUP BY
  p.id
`

type GetProjectByIdRow struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	Name        string
	Description string
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	Members     interface{}
}

func (q *Queries) GetProjectById(ctx context.Context, id uuid.UUID) (GetProjectByIdRow, error) {
	row := q.db.QueryRow(ctx, getProjectById, id)
	var i GetProjectByIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Members,
	)
	return i, err
}

const getProjectMemberByUserIdAndProjectId = `-- name: GetProjectMemberByUserIdAndProjectId :one
SELECT id, user_id, project_id, role FROM project_members
WHERE user_id = $1
  AND project_id = $2
`

type GetProjectMemberByUserIdAndProjectIdParams struct {
	UserID    uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetProjectMemberByUserIdAndProjectId(ctx context.Context, arg GetProjectMemberByUserIdAndProjectIdParams) (ProjectMember, error) {
	row := q.db.QueryRow(ctx, getProjectMemberByUserIdAndProjectId, arg.UserID, arg.ProjectID)
	var i ProjectMember
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProjectID,
		&i.Role,
	)
	return i, err
}

const listProjectsByUserId = `-- name: ListProjectsByUserId :many
WITH project_members_cte AS (
  SELECT
    pm.id as project_member_id,
    pm.user_id as project_member_user_id,
    pm.project_id,
    pm.role,
    u.id as user_id,
    u.name,
    u.email,
    u.created_at,
    u.updated_at
  FROM
    project_members pm
    JOIN users u ON u.id = pm.user_id
)
SELECT
  p.id, p.user_id, p.name, p.description, p.created_at, p.updated_at,
  coalesce(
    jsonb_agg(
      jsonb_build_object(
        'id',
        pm.project_member_id,
        'user_id',
        pm.project_member_user_id,
        'project_id',
        pm.project_id,
        'role',
        pm.role,
        'user',
        jsonb_build_object(
          'id',
          pm.user_id,
          'name',
          pm.name,
          'email',
          pm.email,
          'created_at',
          pm.created_at,
          'updated_at',
          pm.updated_at
        )
      )
    ) filter (
      where
        pm.project_member_id is not null
    ),
    '[]' :: jsonb
  ) as members
FROM
  projects p
  INNER JOIN project_members_cte pm ON pm.project_id = p.id
WHERE
  p.id IN (
    SELECT DISTINCT project_id
    FROM project_members
    WHERE project_members.user_id = $1
    AND (
      $2::text is null
      or role = $2::text
    )
  )
GROUP BY
  p.id
`

type ListProjectsByUserIdParams struct {
	UserID uuid.UUID
	Role   pgtype.Text
}

type ListProjectsByUserIdRow struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	Name        string
	Description string
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	Members     interface{}
}

func (q *Queries) ListProjectsByUserId(ctx context.Context, arg ListProjectsByUserIdParams) ([]ListProjectsByUserIdRow, error) {
	rows, err := q.db.Query(ctx, listProjectsByUserId, arg.UserID, arg.Role)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListProjectsByUserIdRow
	for rows.Next() {
		var i ListProjectsByUserIdRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Members,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeProjectMember = `-- name: RemoveProjectMember :exec
DELETE FROM project_members
WHERE user_id = $1
  AND project_id = $2
`

type RemoveProjectMemberParams struct {
	UserID    uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) RemoveProjectMember(ctx context.Context, arg RemoveProjectMemberParams) error {
	_, err := q.db.Exec(ctx, removeProjectMember, arg.UserID, arg.ProjectID)
	return err
}

const updateProject = `-- name: UpdateProject :exec
UPDATE
  projects
SET
  name = $1,
  description = $2,
  updated_at = CURRENT_TIMESTAMP
WHERE
  id = $3
`

type UpdateProjectParams struct {
	Name        string
	Description string
	ID          uuid.UUID
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) error {
	_, err := q.db.Exec(ctx, updateProject, arg.Name, arg.Description, arg.ID)
	return err
}
