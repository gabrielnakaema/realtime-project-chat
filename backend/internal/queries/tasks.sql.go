// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tasks.sql

package queries

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (project_id, title, description, status, author_id) VALUES ($1, $2, $3, $4, $5) returning id
`

type CreateTaskParams struct {
	ProjectID   uuid.UUID
	Title       string
	Description string
	Status      string
	AuthorID    uuid.UUID
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.ProjectID,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.AuthorID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createTaskChange = `-- name: CreateTaskChange :one
INSERT INTO task_changes (task_id, user_id, description) VALUES ($1, $2, $3) returning id
`

type CreateTaskChangeParams struct {
	TaskID      uuid.UUID
	UserID      pgtype.UUID
	Description string
}

func (q *Queries) CreateTaskChange(ctx context.Context, arg CreateTaskChangeParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createTaskChange, arg.TaskID, arg.UserID, arg.Description)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getTaskById = `-- name: GetTaskById :one
WITH task_changes_cte AS (
  SELECT 
    tc.id as task_change_id,
    tc.task_id as task_change_task_id,
    tc.user_id as task_change_user_id,
    tc.description as task_change_description,
    tc.created_at as task_change_created_at,
    a.id as task_change_author_id,
    a.name as task_change_author_name,
    a.email as task_change_author_email,
    a.created_at as task_change_author_created_at
   FROM task_changes tc
   JOIN users a ON a.id = tc.user_id
   WHERE tc.task_id = $1
  ORDER BY tc.created_at ASC
)
SELECT 
  t.id as task_id,
  t.project_id as task_project_id,
  t.title as task_title,
  t.description as task_description,
  t.status as task_status,
  t.created_at as task_created_at,
  t.updated_at as task_updated_at,
  t.author_id as task_author_id,
  a.name as task_author_name,
  a.email as task_author_email,
  a.created_at as task_author_created_at,
  coalesce(jsonb_agg(
    jsonb_build_object(
      'id',
      tc.task_change_id,
      'task_id',
      tc.task_change_task_id,
      'author_id',
      tc.task_change_author_id,
      'change_description',
      tc.task_change_description,
      'created_at',
      tc.task_change_created_at,
      'author',
      jsonb_build_object(
        'id',
        tc.task_change_author_id,
        'name',
        tc.task_change_author_name,
        'email',
        tc.task_change_author_email,
        'created_at',
        tc.task_change_author_created_at
      )
    )
  ) filter (where tc.task_change_id is not null), '[]'::jsonb) as task_changes
FROM tasks t
LEFT JOIN task_changes_cte tc ON tc.task_change_task_id = t.id
LEFT JOIN users a ON a.id = t.author_id
WHERE t.id = $1
GROUP BY t.id, a.name, a.email, a.created_at
`

type GetTaskByIdRow struct {
	TaskID              uuid.UUID
	TaskProjectID       uuid.UUID
	TaskTitle           string
	TaskDescription     string
	TaskStatus          string
	TaskCreatedAt       pgtype.Timestamptz
	TaskUpdatedAt       pgtype.Timestamptz
	TaskAuthorID        uuid.UUID
	TaskAuthorName      pgtype.Text
	TaskAuthorEmail     pgtype.Text
	TaskAuthorCreatedAt pgtype.Timestamptz
	TaskChanges         interface{}
}

func (q *Queries) GetTaskById(ctx context.Context, id uuid.UUID) (GetTaskByIdRow, error) {
	row := q.db.QueryRow(ctx, getTaskById, id)
	var i GetTaskByIdRow
	err := row.Scan(
		&i.TaskID,
		&i.TaskProjectID,
		&i.TaskTitle,
		&i.TaskDescription,
		&i.TaskStatus,
		&i.TaskCreatedAt,
		&i.TaskUpdatedAt,
		&i.TaskAuthorID,
		&i.TaskAuthorName,
		&i.TaskAuthorEmail,
		&i.TaskAuthorCreatedAt,
		&i.TaskChanges,
	)
	return i, err
}

const listTasksByProjectId = `-- name: ListTasksByProjectId :many
SELECT id, project_id, title, description, status, created_at, updated_at, author_id FROM tasks WHERE project_id = $1
`

func (q *Queries) ListTasksByProjectId(ctx context.Context, projectID uuid.UUID) ([]Task, error) {
	rows, err := q.db.Query(ctx, listTasksByProjectId, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AuthorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks SET title = $1, description = $2, status = $3, updated_at = CURRENT_TIMESTAMP WHERE id = $4
`

type UpdateTaskParams struct {
	Title       string
	Description string
	Status      string
	ID          uuid.UUID
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.Exec(ctx, updateTask,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.ID,
	)
	return err
}
